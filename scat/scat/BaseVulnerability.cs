using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace scat
{
    public abstract class BaseVulnerability
    {
        protected string filename;
        protected string description;
        protected string location;
        protected string codesnippet;
        protected Guid vulnId;
        protected string callStackHtml;
        protected string codeStackHtml;

        public string GetCodeStackHtml()
        {
            return this.codeStackHtml;
        }

        public Guid GetId()
        {
            return this.vulnId;
        }

        public string GetDescription()
        {
            return this.description;
        }

        public string GetFilename()
        {
            return this.filename;
        }

        public string GetLocation()
        {
            return this.location;
        }

        public string GetCodeSnippet()
        {
            return this.codesnippet;
        }

        public abstract Severity GetSeverity();
        public abstract new VulnerabilityType GetType();
        public abstract string GetInformationalLinks();

        public string ToXml()
        {
            string retval = "<vulnerability>";
            
            retval += string.Format("<vulnerabilityId>{0}</vulnerabilityId>", this.GetId().ToString());
            retval += string.Format("<vulnerabilityType>{0}</vulnerabilityType>", this.GetType().ToString());
            retval += string.Format("<vulnerabilitySeverity>{0}</vulnerabilitySeverity>", this.GetSeverity().ToString());
            retval += string.Format("<vulnerabilityFile>{0}</vulnerabilityFile>", this.GetFilename());
            retval += string.Format("<vulnerabilityDescription>{0}</vulnerabilityDescription>", System.Net.WebUtility.HtmlEncode(this.GetDescription()));
            retval += "</vulnerability>";
            return retval;
        }

        public string ToCsv()
        {
            string retval = this.GetId().ToString() + "," + this.GetType().ToString() + "," + this.GetSeverity().ToString() + "," + this.GetFilename() + "," + System.Net.WebUtility.HtmlEncode(this.GetDescription());

            return retval;
        }

        public string ToHtml()
        {
            string retval = string.Empty;

            retval = string.Format("<table");
            retval += string.Format("  <tr >  <td bgcolor=\"{0}\">Severity</td>  <td bgcolor=\"{0}\">{1}</td> </tr>  ", Util.GetColorForSeverity(GetSeverity()).Name, GetSeverity().ToString());
            retval += string.Format("  <tr>  <td>Type</td>  <td>{0}</td> </tr>  ", GetType().ToString());
            retval += string.Format("  <tr>  <td>Description</td>  <td>{0}</td> </tr>  ", GetDescription());
            retval += string.Format("  <tr>  <td>File</td>  <td>{0}</td> </tr>  ", GetFilename());
            retval += string.Format("  <tr>  <td>Location</td>  <td>{0}</td> </tr>  ", GetLocation());
            retval += string.Format("  <tr>  <td>Code Snippet</td>  <td>{0}</td> </tr>  ",System.Net.WebUtility.HtmlEncode( GetCodeSnippet() )  );
          //  retval += string.Format("  <tr>  <td>Links</td>  <td>{0}</td> </tr>  ", GetInformationalLinks());

            if (!string.IsNullOrEmpty(this.callStackHtml))
            {
                retval += string.Format("  <tr>  <td></td>  <td>{0}</td> </tr>  ", this.callStackHtml);
            }

            if (!string.IsNullOrEmpty(this.codeStackHtml))
            {
                retval += string.Format("  <tr>  <td></td>  <td>{0}</td> </tr>  ", this.codeStackHtml);
            }

            retval += "</table>";


            return retval;
        }
    }
}
