using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace scat
{
    public class ArbitraryFileOperationsTemplate : ITemplate
    {
        public string GetRuleName()
        {
            return "Arbitrary File Operations";
        }

        public List<string> GetMethods()
        {
            List<string> retval = new List<string>();

            retval.Add("File.AppendAllLines");
            retval.Add("File.AppendAllText");
            retval.Add("File.AppendText");
            retval.Add("File.Copy");
            retval.Add("File.Exists");
            retval.Add("File.Create");
            retval.Add("File.Decrypt");
            retval.Add("File.Delete");
            retval.Add("File.Encrypt");
            retval.Add("File.Move");
            retval.Add("File.SetAccessControl");
            retval.Add("File.SetCreationTime");
            retval.Add("File.WriteAllBytes");
            retval.Add("File.WriteAllLines");
            retval.Add("File.WriteAllText");
            retval.Add("Directory.CreateDirectory");
            retval.Add("Directory.Delete");
            retval.Add("Directory.Move");

            return retval;
        }

        public BaseVulnerability GetVulnerability(string filename, string location, string code)
        {
            return new GenericVulnerability(filename, "Miscellaneous File Operations Vulnerability", location, code, Severity.Medium, VulnerabilityType.MiscellaneousFileSystemOperation);
        }

        public BaseVulnerability GetVulnerability(string filename, string location, string code, string callStackHtml, string codeStackHtml)
        {
            return new GenericVulnerability(filename, "Miscellaneous File Operations Vulnerability", location, code, callStackHtml, codeStackHtml, Severity.Medium, VulnerabilityType.MiscellaneousFileSystemOperation);
        }
    }
}
